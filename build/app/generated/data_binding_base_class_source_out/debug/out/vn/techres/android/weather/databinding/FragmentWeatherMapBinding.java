// Generated by view binder compiler. Do not edit!
package vn.techres.android.weather.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SearchView;
import androidx.fragment.app.FragmentContainerView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.slider.Slider;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import vn.techres.android.weather.R;
import vn.techres.android.weather.widget.AppTextView;

public final class FragmentWeatherMapBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final SearchView acSearch;

  @NonNull
  public final ImageButton imvBtnNext;

  @NonNull
  public final ImageButton imvBtnPausePlay;

  @NonNull
  public final ImageButton imvBtnPrevent;

  @NonNull
  public final ImageView imvControlMap;

  @NonNull
  public final ImageView imvControlWeather;

  @NonNull
  public final ImageView imvControlWeatherFuture;

  @NonNull
  public final ImageView imvMyLocation;

  @NonNull
  public final ImageView imvNote;

  @NonNull
  public final ImageView imvRemoveMarker;

  @NonNull
  public final LinearLayout llControlFutureWeather;

  @NonNull
  public final LinearLayout llControlMap;

  @NonNull
  public final LinearLayout llControlStyleWeather;

  @NonNull
  public final LinearLayout llDate;

  @NonNull
  public final LinearLayout llMyLocation;

  @NonNull
  public final LinearLayout llRemoveMarker;

  @NonNull
  public final FragmentContainerView map;

  @NonNull
  public final RecyclerView rvDataCity;

  @NonNull
  public final Slider sbDate;

  @NonNull
  public final TextView snippet;

  @NonNull
  public final Spinner spnMode;

  @NonNull
  public final Spinner spnStyleMap;

  @NonNull
  public final TextView title;

  @NonNull
  public final AppTextView tvEndDate;

  @NonNull
  public final AppTextView tvNowDate;

  @NonNull
  public final AppTextView tvStartDate;

  private FragmentWeatherMapBinding(@NonNull FrameLayout rootView, @NonNull SearchView acSearch,
      @NonNull ImageButton imvBtnNext, @NonNull ImageButton imvBtnPausePlay,
      @NonNull ImageButton imvBtnPrevent, @NonNull ImageView imvControlMap,
      @NonNull ImageView imvControlWeather, @NonNull ImageView imvControlWeatherFuture,
      @NonNull ImageView imvMyLocation, @NonNull ImageView imvNote,
      @NonNull ImageView imvRemoveMarker, @NonNull LinearLayout llControlFutureWeather,
      @NonNull LinearLayout llControlMap, @NonNull LinearLayout llControlStyleWeather,
      @NonNull LinearLayout llDate, @NonNull LinearLayout llMyLocation,
      @NonNull LinearLayout llRemoveMarker, @NonNull FragmentContainerView map,
      @NonNull RecyclerView rvDataCity, @NonNull Slider sbDate, @NonNull TextView snippet,
      @NonNull Spinner spnMode, @NonNull Spinner spnStyleMap, @NonNull TextView title,
      @NonNull AppTextView tvEndDate, @NonNull AppTextView tvNowDate,
      @NonNull AppTextView tvStartDate) {
    this.rootView = rootView;
    this.acSearch = acSearch;
    this.imvBtnNext = imvBtnNext;
    this.imvBtnPausePlay = imvBtnPausePlay;
    this.imvBtnPrevent = imvBtnPrevent;
    this.imvControlMap = imvControlMap;
    this.imvControlWeather = imvControlWeather;
    this.imvControlWeatherFuture = imvControlWeatherFuture;
    this.imvMyLocation = imvMyLocation;
    this.imvNote = imvNote;
    this.imvRemoveMarker = imvRemoveMarker;
    this.llControlFutureWeather = llControlFutureWeather;
    this.llControlMap = llControlMap;
    this.llControlStyleWeather = llControlStyleWeather;
    this.llDate = llDate;
    this.llMyLocation = llMyLocation;
    this.llRemoveMarker = llRemoveMarker;
    this.map = map;
    this.rvDataCity = rvDataCity;
    this.sbDate = sbDate;
    this.snippet = snippet;
    this.spnMode = spnMode;
    this.spnStyleMap = spnStyleMap;
    this.title = title;
    this.tvEndDate = tvEndDate;
    this.tvNowDate = tvNowDate;
    this.tvStartDate = tvStartDate;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentWeatherMapBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentWeatherMapBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_weather_map, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentWeatherMapBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.acSearch;
      SearchView acSearch = ViewBindings.findChildViewById(rootView, id);
      if (acSearch == null) {
        break missingId;
      }

      id = R.id.imvBtnNext;
      ImageButton imvBtnNext = ViewBindings.findChildViewById(rootView, id);
      if (imvBtnNext == null) {
        break missingId;
      }

      id = R.id.imvBtnPausePlay;
      ImageButton imvBtnPausePlay = ViewBindings.findChildViewById(rootView, id);
      if (imvBtnPausePlay == null) {
        break missingId;
      }

      id = R.id.imvBtnPrevent;
      ImageButton imvBtnPrevent = ViewBindings.findChildViewById(rootView, id);
      if (imvBtnPrevent == null) {
        break missingId;
      }

      id = R.id.imvControlMap;
      ImageView imvControlMap = ViewBindings.findChildViewById(rootView, id);
      if (imvControlMap == null) {
        break missingId;
      }

      id = R.id.imvControlWeather;
      ImageView imvControlWeather = ViewBindings.findChildViewById(rootView, id);
      if (imvControlWeather == null) {
        break missingId;
      }

      id = R.id.imvControlWeatherFuture;
      ImageView imvControlWeatherFuture = ViewBindings.findChildViewById(rootView, id);
      if (imvControlWeatherFuture == null) {
        break missingId;
      }

      id = R.id.imvMyLocation;
      ImageView imvMyLocation = ViewBindings.findChildViewById(rootView, id);
      if (imvMyLocation == null) {
        break missingId;
      }

      id = R.id.imvNote;
      ImageView imvNote = ViewBindings.findChildViewById(rootView, id);
      if (imvNote == null) {
        break missingId;
      }

      id = R.id.imvRemoveMarker;
      ImageView imvRemoveMarker = ViewBindings.findChildViewById(rootView, id);
      if (imvRemoveMarker == null) {
        break missingId;
      }

      id = R.id.llControlFutureWeather;
      LinearLayout llControlFutureWeather = ViewBindings.findChildViewById(rootView, id);
      if (llControlFutureWeather == null) {
        break missingId;
      }

      id = R.id.llControlMap;
      LinearLayout llControlMap = ViewBindings.findChildViewById(rootView, id);
      if (llControlMap == null) {
        break missingId;
      }

      id = R.id.llControlStyleWeather;
      LinearLayout llControlStyleWeather = ViewBindings.findChildViewById(rootView, id);
      if (llControlStyleWeather == null) {
        break missingId;
      }

      id = R.id.llDate;
      LinearLayout llDate = ViewBindings.findChildViewById(rootView, id);
      if (llDate == null) {
        break missingId;
      }

      id = R.id.llMyLocation;
      LinearLayout llMyLocation = ViewBindings.findChildViewById(rootView, id);
      if (llMyLocation == null) {
        break missingId;
      }

      id = R.id.llRemoveMarker;
      LinearLayout llRemoveMarker = ViewBindings.findChildViewById(rootView, id);
      if (llRemoveMarker == null) {
        break missingId;
      }

      id = R.id.map;
      FragmentContainerView map = ViewBindings.findChildViewById(rootView, id);
      if (map == null) {
        break missingId;
      }

      id = R.id.rvDataCity;
      RecyclerView rvDataCity = ViewBindings.findChildViewById(rootView, id);
      if (rvDataCity == null) {
        break missingId;
      }

      id = R.id.sbDate;
      Slider sbDate = ViewBindings.findChildViewById(rootView, id);
      if (sbDate == null) {
        break missingId;
      }

      id = R.id.snippet;
      TextView snippet = ViewBindings.findChildViewById(rootView, id);
      if (snippet == null) {
        break missingId;
      }

      id = R.id.spnMode;
      Spinner spnMode = ViewBindings.findChildViewById(rootView, id);
      if (spnMode == null) {
        break missingId;
      }

      id = R.id.spnStyleMap;
      Spinner spnStyleMap = ViewBindings.findChildViewById(rootView, id);
      if (spnStyleMap == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.tvEndDate;
      AppTextView tvEndDate = ViewBindings.findChildViewById(rootView, id);
      if (tvEndDate == null) {
        break missingId;
      }

      id = R.id.tvNowDate;
      AppTextView tvNowDate = ViewBindings.findChildViewById(rootView, id);
      if (tvNowDate == null) {
        break missingId;
      }

      id = R.id.tvStartDate;
      AppTextView tvStartDate = ViewBindings.findChildViewById(rootView, id);
      if (tvStartDate == null) {
        break missingId;
      }

      return new FragmentWeatherMapBinding((FrameLayout) rootView, acSearch, imvBtnNext,
          imvBtnPausePlay, imvBtnPrevent, imvControlMap, imvControlWeather, imvControlWeatherFuture,
          imvMyLocation, imvNote, imvRemoveMarker, llControlFutureWeather, llControlMap,
          llControlStyleWeather, llDate, llMyLocation, llRemoveMarker, map, rvDataCity, sbDate,
          snippet, spnMode, spnStyleMap, title, tvEndDate, tvNowDate, tvStartDate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
